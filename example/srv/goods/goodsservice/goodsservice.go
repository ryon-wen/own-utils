// Code generated by goctl. DO NOT EDIT.
// Source: goods.proto

package goodsservice

import (
	"context"

	"2106A-zg6/srv/goods/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddReq          = pb.AddReq
	DeleteReq       = pb.DeleteReq
	FindByIDsReq    = pb.FindByIDsReq
	FindReq         = pb.FindReq
	FindResp        = pb.FindResp
	GetReq          = pb.GetReq
	GetResp         = pb.GetResp
	Good            = pb.Good
	GoodsEmpty      = pb.GoodsEmpty
	GoodsStock      = pb.GoodsStock
	SearchGoodsReq  = pb.SearchGoodsReq
	SearchGoodsResp = pb.SearchGoodsResp
	UpdateReq       = pb.UpdateReq
	UpdateStockReq  = pb.UpdateStockReq

	GoodsService interface {
		Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
		Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
		Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
		Find(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindResp, error)
		FindByIds(ctx context.Context, in *FindByIDsReq, opts ...grpc.CallOption) (*FindResp, error)
		UpdateStock(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
		UpdateStockBack(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
		SearchGoods(ctx context.Context, in *SearchGoodsReq, opts ...grpc.CallOption) (*SearchGoodsResp, error)
	}

	defaultGoodsService struct {
		cli zrpc.Client
	}
)

func NewGoodsService(cli zrpc.Client) GoodsService {
	return &defaultGoodsService{
		cli: cli,
	}
}

func (m *defaultGoodsService) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.Add(ctx, in, opts...)
}

func (m *defaultGoodsService) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultGoodsService) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultGoodsService) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultGoodsService) Find(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindResp, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.Find(ctx, in, opts...)
}

func (m *defaultGoodsService) FindByIds(ctx context.Context, in *FindByIDsReq, opts ...grpc.CallOption) (*FindResp, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.FindByIds(ctx, in, opts...)
}

func (m *defaultGoodsService) UpdateStock(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.UpdateStock(ctx, in, opts...)
}

func (m *defaultGoodsService) UpdateStockBack(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.UpdateStockBack(ctx, in, opts...)
}

func (m *defaultGoodsService) SearchGoods(ctx context.Context, in *SearchGoodsReq, opts ...grpc.CallOption) (*SearchGoodsResp, error) {
	client := pb.NewGoodsServiceClient(m.cli.Conn())
	return client.SearchGoods(ctx, in, opts...)
}
