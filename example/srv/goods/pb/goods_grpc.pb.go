// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/goods.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoodsService_Add_FullMethodName             = "/pb.GoodsService/Add"
	GoodsService_Update_FullMethodName          = "/pb.GoodsService/Update"
	GoodsService_Get_FullMethodName             = "/pb.GoodsService/Get"
	GoodsService_Delete_FullMethodName          = "/pb.GoodsService/Delete"
	GoodsService_Find_FullMethodName            = "/pb.GoodsService/Find"
	GoodsService_FindByIds_FullMethodName       = "/pb.GoodsService/FindByIds"
	GoodsService_UpdateStock_FullMethodName     = "/pb.GoodsService/UpdateStock"
	GoodsService_UpdateStockBack_FullMethodName = "/pb.GoodsService/UpdateStockBack"
	GoodsService_SearchGoods_FullMethodName     = "/pb.GoodsService/SearchGoods"
)

// GoodsServiceClient is the client API for GoodsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsServiceClient interface {
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
	Find(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindResp, error)
	FindByIds(ctx context.Context, in *FindByIDsReq, opts ...grpc.CallOption) (*FindResp, error)
	UpdateStock(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
	UpdateStockBack(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*GoodsEmpty, error)
	SearchGoods(ctx context.Context, in *SearchGoodsReq, opts ...grpc.CallOption) (*SearchGoodsResp, error)
}

type goodsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsServiceClient(cc grpc.ClientConnInterface) GoodsServiceClient {
	return &goodsServiceClient{cc}
}

func (c *goodsServiceClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, GoodsService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, GoodsService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, GoodsService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, GoodsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) Find(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindResp, error) {
	out := new(FindResp)
	err := c.cc.Invoke(ctx, GoodsService_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) FindByIds(ctx context.Context, in *FindByIDsReq, opts ...grpc.CallOption) (*FindResp, error) {
	out := new(FindResp)
	err := c.cc.Invoke(ctx, GoodsService_FindByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) UpdateStock(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, GoodsService_UpdateStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) UpdateStockBack(ctx context.Context, in *UpdateStockReq, opts ...grpc.CallOption) (*GoodsEmpty, error) {
	out := new(GoodsEmpty)
	err := c.cc.Invoke(ctx, GoodsService_UpdateStockBack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) SearchGoods(ctx context.Context, in *SearchGoodsReq, opts ...grpc.CallOption) (*SearchGoodsResp, error) {
	out := new(SearchGoodsResp)
	err := c.cc.Invoke(ctx, GoodsService_SearchGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServiceServer is the server API for GoodsService service.
// All implementations must embed UnimplementedGoodsServiceServer
// for forward compatibility
type GoodsServiceServer interface {
	Add(context.Context, *AddReq) (*GoodsEmpty, error)
	Update(context.Context, *UpdateReq) (*GoodsEmpty, error)
	Get(context.Context, *GetReq) (*GetResp, error)
	Delete(context.Context, *DeleteReq) (*GoodsEmpty, error)
	Find(context.Context, *FindReq) (*FindResp, error)
	FindByIds(context.Context, *FindByIDsReq) (*FindResp, error)
	UpdateStock(context.Context, *UpdateStockReq) (*GoodsEmpty, error)
	UpdateStockBack(context.Context, *UpdateStockReq) (*GoodsEmpty, error)
	SearchGoods(context.Context, *SearchGoodsReq) (*SearchGoodsResp, error)
	mustEmbedUnimplementedGoodsServiceServer()
}

// UnimplementedGoodsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServiceServer struct {
}

func (UnimplementedGoodsServiceServer) Add(context.Context, *AddReq) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedGoodsServiceServer) Update(context.Context, *UpdateReq) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGoodsServiceServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGoodsServiceServer) Delete(context.Context, *DeleteReq) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGoodsServiceServer) Find(context.Context, *FindReq) (*FindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedGoodsServiceServer) FindByIds(context.Context, *FindByIDsReq) (*FindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIds not implemented")
}
func (UnimplementedGoodsServiceServer) UpdateStock(context.Context, *UpdateStockReq) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedGoodsServiceServer) UpdateStockBack(context.Context, *UpdateStockReq) (*GoodsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStockBack not implemented")
}
func (UnimplementedGoodsServiceServer) SearchGoods(context.Context, *SearchGoodsReq) (*SearchGoodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGoods not implemented")
}
func (UnimplementedGoodsServiceServer) mustEmbedUnimplementedGoodsServiceServer() {}

// UnsafeGoodsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServiceServer will
// result in compilation errors.
type UnsafeGoodsServiceServer interface {
	mustEmbedUnimplementedGoodsServiceServer()
}

func RegisterGoodsServiceServer(s grpc.ServiceRegistrar, srv GoodsServiceServer) {
	s.RegisterService(&GoodsService_ServiceDesc, srv)
}

func _GoodsService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).Find(ctx, req.(*FindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_FindByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).FindByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_FindByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).FindByIds(ctx, req.(*FindByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_UpdateStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).UpdateStock(ctx, req.(*UpdateStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_UpdateStockBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).UpdateStockBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_UpdateStockBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).UpdateStockBack(ctx, req.(*UpdateStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_SearchGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).SearchGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_SearchGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).SearchGoods(ctx, req.(*SearchGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsService_ServiceDesc is the grpc.ServiceDesc for GoodsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GoodsService",
	HandlerType: (*GoodsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _GoodsService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GoodsService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GoodsService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GoodsService_Delete_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _GoodsService_Find_Handler,
		},
		{
			MethodName: "FindByIds",
			Handler:    _GoodsService_FindByIds_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _GoodsService_UpdateStock_Handler,
		},
		{
			MethodName: "UpdateStockBack",
			Handler:    _GoodsService_UpdateStockBack_Handler,
		},
		{
			MethodName: "SearchGoods",
			Handler:    _GoodsService_SearchGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/goods.proto",
}
